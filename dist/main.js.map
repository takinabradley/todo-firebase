{"version":3,"file":"main.js","mappings":"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","sources":["webpack://my-webpack-project/./src/helpers/isEmptyString.js","webpack://my-webpack-project/./src/modules/Project.js","webpack://my-webpack-project/./src/modules/Todo.js","webpack://my-webpack-project/./src/modules/storageManager.js","webpack://my-webpack-project/./src/views/addForm.js","webpack://my-webpack-project/./src/views/nameDisplay.js","webpack://my-webpack-project/./src/views/projectList.js","webpack://my-webpack-project/./src/views/todoList.js","webpack://my-webpack-project/./src/views/sidebar.js","webpack://my-webpack-project/./src/views/views.js","webpack://my-webpack-project/./src/modules/TodoController.js","webpack://my-webpack-project/./src/modules/ProjectList.js"],"sourcesContent":["const isAllSpaces = (string) => [...string].every((char) => char === \" \")\nconst isEmptyString = (string) => {\n  if (typeof string !== \"string\") return false\n  if (string.length === 0 || isAllSpaces(string)) return true\n  return false\n}\n\nexport default isEmptyString\n","import Todo from \"./Todo\"\nimport isEmptyString from \"../helpers/isEmptyString\"\nconst isString = (value) => typeof value === \"string\"\nconst isDate = (value) => Date.prototype.isPrototypeOf(value)\nconst isHighMediumOrLow = (value) => {\n  switch (value) {\n    case \"high\":\n      return true\n    case \"medium\":\n      return true\n    case \"low\":\n      return true\n    default:\n      return false\n  }\n}\n\nexport default function Project(name, id = Date.now(), todos = {}) {\n  if (typeof name !== \"string\" || isEmptyString(name)) return\n  if (typeof todos !== \"object\") return\n\n  function addTodo(\n    title = \"\",\n    description = \"\",\n    duedate = new Date(),\n    priority = \"medium\"\n  ) {\n    if (!isString(title) || todos[title] || isEmptyString(title)) return false\n    if (!isString(description)) return false\n    if (!isDate(duedate)) return false\n    if (!isHighMediumOrLow(priority)) return false\n\n    todos[title] = Todo(title, description, duedate, priority)\n    return true\n  }\n\n  function removeTodo(title) {\n    if (!todos[title]) return false\n    delete todos[title]\n    return true\n  }\n\n  function editTodo(title, field, change) {\n    if (!todos[title]) return false\n\n    switch (field) {\n      case \"title\":\n        if (isString(change) && !isEmptyString(change) && !todos[change]) {\n          const newTitle = change\n          const oldTitle = title\n\n          const temp = todos[oldTitle]\n          temp.title = newTitle\n          delete todos[oldTitle]\n          todos[newTitle] = temp\n          return true\n        } else {\n          return false\n        }\n      case \"description\":\n        if (isString(change)) {\n          todos[title].description = change\n          return true\n        } else {\n          return false\n        }\n      case \"duedate\":\n        if (isDate(change)) {\n          todos[title].duedate = change\n          return true\n        } else {\n          return false\n        }\n      case \"priority\":\n        if (isHighMediumOrLow(change)) {\n          todos[title].priority = change\n          return true\n        } else {\n          return false\n        }\n      default:\n        return false\n    }\n  }\n\n  function findTodo(title) {\n    if (!todos[title]) return\n    return { ...todos[title] }\n  }\n\n  function _copyTodos() {\n    const todoCopy = { ...todos }\n    for (const key in todoCopy) {\n      todoCopy[key] = { ...todoCopy[key] }\n    }\n    return todoCopy\n  }\n\n  return Object.freeze({\n    get name() {\n      return name\n    },\n    set name(newName) {\n      if (typeof newName !== \"string\" || isEmptyString(newName)) return\n      name = newName\n    },\n    get id() {\n      return id\n    },\n    get todos() {\n      return _copyTodos()\n    },\n    addTodo,\n    removeTodo,\n    editTodo,\n    findTodo\n  })\n}\n","import isEmptyString from \"../helpers/isEmptyString\"\n\nfunction Todo(title, description, duedate, priority, id = Date.now()) {\n  if (typeof title !== \"string\" || isEmptyString(title)) return\n\n  return {\n    title,\n    description,\n    duedate,\n    priority,\n    get id() {\n      return id\n    }\n  }\n}\n\nexport default Todo\n","function saveProjects(projectList) {\n  const stringifiedProjects = JSON.stringify(projectList)\n  localStorage.setItem(\"projects\", stringifiedProjects)\n}\n\nfunction getProjects() {\n  return JSON.parse(localStorage.getItem(\"projects\"))\n}\n\nexport default {\n  saveProjects,\n  getProjects\n}\n","const addFormElement = document.querySelector(\".add-form\")\nconst addForm = {\n  form: addFormElement,\n  nameInput: addFormElement.elements.nameInput,\n  addBtn: addFormElement.elements.addBtn,\n  clear() {\n    this.nameInput.value = \"\"\n  }\n}\n\nexport default addForm\n","const nameDisplayElement = document.querySelector(\".name-display\")\nconst nameDisplay = {\n  container: nameDisplayElement,\n  setName(name) {\n    this.container.textContent = name\n  }\n}\n\nexport default nameDisplay\n","const projectListContainer = document.querySelector(\".project-list\")\nconst projectList = {\n  container: projectListContainer,\n  get selected() {\n    /* find the project the user selected, and return it's name */\n    for (let i = 0; i < this.container.children.length; i++) {\n      const nameInput = this.container.children[i].projectName\n      if (\n        nameInput.classList.contains(\"project-list__project-name--selected\")\n      ) {\n        return nameInput.value\n      }\n    }\n\n    /* If nothing is found, return null */\n    return null\n  },\n  clear() {\n    this.container.innerHTML = \"\"\n  },\n  createNameForm(projectName) {\n    const nameForm = document.createElement(\"form\")\n    nameForm.className = \"project-list__project\"\n    nameForm\n\n    const nameInput = document.createElement(\"input\")\n    nameInput.type = \"text\"\n    nameInput.readOnly = true\n    nameInput.dataset.projectName = projectName\n    nameInput.value = projectName\n    nameInput.className = \"project-list__project-name\"\n    nameInput.name = \"projectName\"\n\n    const editBtn = document.createElement(\"button\")\n    editBtn.type = \"button\"\n    editBtn.textContent = \"Edit\"\n    editBtn.className = \"project-list__project-edit\"\n    editBtn.name = \"projectEdit\"\n\n    const deleteBtn = document.createElement(\"button\")\n    deleteBtn.type = \"button\"\n    deleteBtn.textContent = \"delete\"\n    deleteBtn.className = \"project-list__project-delete\"\n    deleteBtn.name = \"projectDelete\"\n\n    nameForm.append(nameInput, editBtn, deleteBtn)\n    return nameForm\n  },\n  render(nameArray) {\n    this.clear()\n    const elements = nameArray.map(this.createNameForm)\n    this.container.append(...elements)\n  },\n  toggleReadOnly(nameInput) {\n    nameInput.readOnly = !nameInput.readOnly\n  },\n  select(selectedName) {\n    // loop through all forms, remove selected class from each, and add selected\n    // class to selected element\n    for (let i = 0; i < this.container.children.length; i++) {\n      const nameInput = this.container.children[i].projectName\n\n      if (\n        nameInput.classList.contains(\"project-list__project-name--selected\")\n      ) {\n        nameInput.classList.remove(\"project-list__project-name--selected\")\n      }\n\n      if (nameInput.dataset.projectName === selectedName) {\n        nameInput.classList.add(\"project-list__project-name--selected\")\n      }\n    }\n  }\n}\n\nexport default projectList\n","const container = document.querySelector(\".todo-list\")\nconst form = container.querySelector(\".todo-list__form\")\nconst addBtn = container.querySelector(\".todo-list__add-btn\")\nconst todos = container.querySelector(\".todo-list__todos\")\nconst todoList = {\n  container,\n  form,\n  addBtn,\n  todos,\n  createTodoElement(todo) {\n    const todoElement = document.createElement(\"div\")\n    todoElement.className = \"todo-list__todo\"\n    const { title, description, priority, duedate } = todo\n    const dateString =\n      duedate.getMonth() + \"/\" + duedate.getDate() + \"/\" + duedate.getFullYear()\n\n    todoElement.textContent = `${title} | ${description} | ${dateString} | ${priority}`\n    return todoElement\n  },\n  clearTodos() {\n    this.todos.innerHTML = \"\"\n  },\n  hideForm() {\n    this.form.classList.add(\"todo-list__form--hidden\")\n  },\n  showForm() {\n    this.form.classList.remove(\"todo-list__form--hidden\")\n  },\n  toggleForm() {\n    this.form.classList.toggle(\"todo-list__form--hidden\")\n  },\n  renderTodos(list) {\n    this.clearTodos()\n    const todoElements = Object.values(list).map(this.createTodoElement)\n    this.todos.append(...todoElements)\n  }\n}\n\nexport default todoList\n","const container = document.querySelector(\".todo__sidebar\")\nconst toggleButton = document.querySelector(\".todo__sidebar-toggle\")\n\nconst sidebar = {\n  sidebar: container,\n  toggleButton,\n  hide() {\n    this.sidebar.classList.add(\"todo__sidebar--hidden\")\n    this.toggleButton.checked = false\n  },\n  show() {\n    this.sidebar.classList.remove(\"todo__sidebar--hidden\")\n  },\n  toggle() {\n    if (this.sidebar.classList.contains(\"todo__sidebar--hidden\")) {\n      this.show()\n    } else {\n      this.hide()\n    }\n  }\n}\n\nexport default sidebar\n","import addForm from \"./addForm\"\nimport nameDisplay from \"./nameDisplay\"\nimport projectList from \"./projectList\"\nimport todoList from \"./todoList\"\nimport sidebar from \"./sidebar\"\n\nexport default { nameDisplay, addForm, projectList, todoList, sidebar }\n","import ProjectList from \"./ProjectList\"\nimport storageManager from \"./storageManager\"\nimport views from \"../views/views\"\nconst projects = ProjectList()\n\nfunction reviveTodoData(todos) {\n  /* changes the duedate in all the todos to be an actual date object. \n     modified the incoming object \n  */\n  for (const todo in todos) {\n    todos[todo].duedate = new Date(todos[todo].duedate)\n  }\n  return todos\n}\n\nfunction addStoredProjectsToProjectList(projectList) {\n  const storedProjects = storageManager.getProjects()\n\n  for (const project in storedProjects) {\n    const success = projectList.add(\n      storedProjects[project].name,\n      storedProjects[project].id,\n      reviveTodoData(storedProjects[project].todos)\n    )\n  }\n}\n\nfunction getProjectNames() {\n  return Object.keys(projects.list)\n}\n\nfunction renderProjectList() {\n  /* clear the current list of projects and render the new one  */\n  views.projectList.clear()\n  views.projectList.render(getProjectNames())\n}\n\nfunction addNewProjectAndRenderProjectList(e) {\n  /* \n    Add new project and clears form if the project name is valid.\n    Otherwise, do nothing.\n  */\n  e.preventDefault()\n  const newProjectName = views.addForm.nameInput.value\n  const wasAdded = projects.add(newProjectName)\n  if (wasAdded) {\n    renderProjectList()\n    views.addForm.clear()\n    selectProject(newProjectName)\n    storageManager.saveProjects(projects.list)\n  }\n}\n\nfunction selectProject(projectName) {\n  /* \n    Highlight project name in list and set the current value in nameDisplay \n    to be the project name\n  */\n  if (projectName) {\n    views.projectList.select(projectName)\n    views.nameDisplay.setName(projectName)\n    views.todoList.renderTodos(projects.list[projectName].todos)\n  }\n}\n\nfunction changeProjectName(form, currentName, newName) {\n  /* Change a project name if it should be changed, and re-render the list of \n    projects if it is changed */\n  const nameInput = form.projectName\n  const editBtn = form.projectEdit\n\n  if (currentName === newName) {\n    views.projectList.toggleReadOnly(nameInput)\n    editBtn.textContent = \"Edit\"\n    return\n  }\n\n  const wasChanged = projects.editName(currentName, newName)\n  if (wasChanged) {\n    nameInput.value = newName\n    nameInput.dataset.projectName = newName\n    views.projectList.toggleReadOnly(nameInput)\n    renderProjectList()\n    selectProject(newName)\n    storageManager.saveProjects(projects.list)\n  }\n}\n\nfunction handleEditProjectName(e) {\n  /* \n    If an input in the list of projects is read-only, allow input and show a \n    submit button\n\n    If it is not readonly, try to change the project name and return the input\n    to a read-only state\n  */\n  if (e.target.className !== \"project-list__project-edit\") return\n  const form = e.target.parentElement\n  const editBtn = e.target\n  const nameInput = form.projectName\n\n  if (nameInput.readOnly) {\n    views.projectList.toggleReadOnly(nameInput)\n    editBtn.textContent = \"submit\"\n  } else {\n    const currentName = nameInput.dataset.projectName\n    changeProjectName(form, currentName, nameInput.value)\n  }\n}\n\nfunction addTodoFromFormInfo(e) {\n  /* attempt to add a todo to a project when the 'Add Todo' form is submitted */\n  e.preventDefault()\n  const selectedProject = views.projectList.selected\n  if (!selectedProject) return\n\n  const form = views.todoList.form\n  const title = form.title.value\n  const description = form.description.value\n  const duedate = new Date(form.duedate.value + \"T00:00\")\n  const priority = form.priority.value\n\n  const success = projects.list[selectedProject].addTodo(\n    title,\n    description,\n    duedate,\n    priority\n  )\n  if (success) {\n    views.todoList.renderTodos(projects.list[selectedProject].todos)\n    storageManager.saveProjects(projects.list)\n  }\n}\n\nfunction loadProjects() {\n  const storedProjects = storageManager.getProjects()\n  if (storedProjects && Object.keys(storedProjects).length !== 0) {\n    addStoredProjectsToProjectList(projects)\n    renderProjectList()\n    selectProject(Object.keys(storedProjects)[0]) // select first project in list\n    /* do some firebase shenanegans */\n  } else {\n    projects.add(\"Default Project\")\n    renderProjectList()\n    selectProject(\"Default Project\")\n    storageManager.saveProjects(projects.list)\n  }\n}\n\nfunction deleteProject(e) {\n  if (!e.target.classList.contains(\"project-list__project-delete\")) return\n  const form = e.target.parentElement\n  const projectName = form.projectName.value\n  projects.remove(projectName)\n  renderProjectList()\n  storageManager.saveProjects(projects.list)\n}\n\n/* \n\n  ~~~~~ Event Listeners ~~~~~\n\n*/\nfunction applyAddFormListeners() {\n  /* attempt to add a new project when the add form submits */\n  views.addForm.form.addEventListener(\n    \"submit\",\n    addNewProjectAndRenderProjectList\n  )\n}\n\nfunction applyProjectListListeners() {\n  /* \n    Select the project in the sidebar and render the todos when a project name\n    is clicked\n  */\n  views.projectList.container.addEventListener(\"click\", (e) =>\n    selectProject(e.target.dataset.projectName)\n  )\n\n  /* \n    handle editing of project names when the edit buttons are clicked in the\n    sidebar\n  */\n  views.projectList.container.addEventListener(\"click\", handleEditProjectName)\n  views.projectList.container.addEventListener(\"submit\", (e) =>\n    e.preventDefault()\n  )\n\n  /* Delete a project when a delete button is pressed */\n  views.projectList.container.addEventListener(\"click\", deleteProject)\n}\n\nfunction applySidebarListeners() {\n  views.sidebar.toggleButton.addEventListener(\"click\", () =>\n    /* show/hide sidebar when the toggle button is clicked */\n    views.sidebar.toggle()\n  )\n\n  document.addEventListener(\"click\", (e) => {\n    /* Hide sidebar when it's clicked away from */\n    if (\n      views.sidebar.sidebar.contains(e.target) ||\n      e.target === views.sidebar.toggleButton\n    ) {\n      return\n    }\n    views.sidebar.hide()\n  })\n}\n\nfunction applyTodoListListeners() {\n  views.todoList.addBtn.addEventListener(\"click\", () =>\n    /* Hide and show todo list form when the 'Add Todo' button is clicked */\n    views.todoList.toggleForm()\n  )\n\n  views.todoList.form.addEventListener(\"submit\", addTodoFromFormInfo)\n}\n\nfunction applyAppListeners() {\n  applyAddFormListeners()\n  applyProjectListListeners()\n  applySidebarListeners()\n  applyTodoListListeners()\n}\n\napplyAppListeners()\nloadProjects()\n","import Project from \"./Project\"\n\nexport default function ProjectList() {\n  const list = {}\n\n  function add(name, id = Date.now(), todos = {}) {\n    if (list[name]) return false\n\n    const newProject = Project(name, id, todos)\n    if (!newProject) return false\n    list[name] = newProject\n    return true\n  }\n\n  function remove(name) {\n    if (!list[name]) return false\n    delete list[name]\n    return true\n  }\n\n  /* Note: Project names should only be changed via this function */\n  function editName(name, newName) {\n    // if the newName already exists, or the current name doesn't exist, don't allow\n    if (list[newName] || !list[name]) return false\n    // attempt to change name\n    list[name].name = newName\n\n    // Check if the name changed to know it's a valid name\n    if (list[name].name === newName) {\n      const temp = list[name]\n      delete list[name]\n      list[newName] = temp\n      return true\n    } else {\n      return false\n    }\n  }\n\n  function _copyList() {\n    return { ...list }\n  }\n  return Object.freeze({\n    get list() {\n      return _copyList()\n    },\n    add,\n    remove,\n    editName\n  })\n}\n"],"names":["string","length","every","char","isAllSpaces","isString","value","isDate","Date","prototype","isPrototypeOf","isHighMediumOrLow","Project","name","id","arguments","undefined","now","todos","isEmptyString","_typeof","Object","freeze","newName","todoCopy","_objectSpread","key","_copyTodos","addTodo","title","description","duedate","priority","Todo","removeTodo","editTodo","field","change","newTitle","oldTitle","temp","findTodo","saveProjects","projectList","stringifiedProjects","JSON","stringify","localStorage","setItem","getProjects","parse","getItem","addFormElement","document","querySelector","form","nameInput","elements","addBtn","clear","this","container","setName","textContent","selected","i","children","projectName","classList","contains","innerHTML","createNameForm","nameForm","createElement","className","type","readOnly","dataset","editBtn","deleteBtn","append","render","nameArray","_this$container","map","apply","toggleReadOnly","select","selectedName","remove","add","nameDisplay","addForm","todoList","createTodoElement","todo","todoElement","dateString","getMonth","getDate","getFullYear","concat","clearTodos","hideForm","showForm","toggleForm","toggle","renderTodos","list","_this$todos","todoElements","values","sidebar","toggleButton","hide","checked","show","storedProjects","projects","newProject","editName","reviveTodoData","renderProjectList","views","keys","selectProject","addEventListener","e","preventDefault","newProjectName","storageManager","target","parentElement","currentName","projectEdit","changeProjectName","selectedProject","project","addStoredProjectsToProjectList"],"sourceRoot":""}